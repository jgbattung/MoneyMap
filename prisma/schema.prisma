// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  financialAccounts FinancialAccount[]
  expenseTypes      ExpenseType[]
  incomeTypes       IncomeType[]

  incomeTransactions IncomeTransaction[]
  transferTypes TransferType[]
  transferTransactions TransferTransaction[]
  expenseTransactions ExpenseTransaction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
  CRYPTO
  RETIREMENT
  REAL_ESTATE
  OTHER
}

model FinancialAccount {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")  
  name            String
  accountType     AccountType @map("account_type")
  initialBalance  Decimal     @map("initial_balance") @db.Decimal(15, 2)
  currentBalance  Decimal     @map("current_balance") @db.Decimal(15, 2)
  addToNetWorth   Boolean     @map("add_to_net_worth") @default(true)
  statementDate   Int?        @map("statement_date")
  dueDate         Int?        @map("due_date")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transfersFrom TransferTransaction[] @relation("TransferFrom")
  transfersTo   TransferTransaction[] @relation("TransferTo")

  incomeTransactions IncomeTransaction[]
  expenseTransactions ExpenseTransaction[]
  
  @@map("financial_accounts")
}

model ExpenseType {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  name          String    @db.VarChar(50)
  monthlyBudget Decimal?  @map("monthly_budget") @db.Decimal(15, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenseTransactions ExpenseTransaction[]
  
  @@unique([userId, name])
  @@map("expense_types")
}

model ExpenseTransaction {
  id                    String          @id @default(cuid())
  userId                String          @map("user_id")
  accountId             String          @map("account_id")
  expenseTypeId         String          @map("expense_type_id")
  name                  String
  amount                Decimal         @db.Decimal(15, 2)
  date                  DateTime
  description           String?
  
  isInstallment         Boolean         @default(false) @map("is_installment")
  installmentDuration   Int?            @map("installment_duration")
  remainingInstallments Int?            @map("remaining_installments")
  installmentStartDate  DateTime?       @map("installment_start_date")
  monthlyAmount         Decimal?        @map("monthly_amount") @db.Decimal(15, 2)
  
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  account               FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  expenseType           ExpenseType     @relation(fields: [expenseTypeId], references: [id], onDelete: Restrict)
  
  @@map("expense_transactions")
}

model IncomeType {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  name          String    @db.VarChar(50)
  monthlyTarget Decimal?  @map("monthly_target") @db.Decimal(15, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  incomeTransactions IncomeTransaction[]
  
  @@unique([userId, name])
  @@map("income_types")
}

model IncomeTransaction {
  id            String          @id @default(cuid())
  userId        String          @map("user_id")
  accountId     String          @map("account_id")
  incomeTypeId  String          @map("income_type_id")
  name          String          @db.VarChar(100)
  amount        Decimal         @db.Decimal(15, 2)
  date          DateTime        @db.Date
  description   String?         @db.Text
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  account     FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  incomeType  IncomeType       @relation(fields: [incomeTypeId], references: [id], onDelete: Cascade)
  
  @@map("income_transactions")
}

model TransferType {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  name      String    @db.VarChar(50)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  transferTransactions TransferTransaction[]
  
  @@unique([userId, name])
  @@map("transfer_types")
}

model TransferTransaction {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  name            String   @db.VarChar(100)
  amount          Float
  fromAccountId   String   @map("from_account_id")
  toAccountId     String   @map("to_account_id")
  transferTypeId  String   @map("transfer_type_id")
  date            DateTime
  notes           String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount  FinancialAccount      @relation("TransferFrom", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount    FinancialAccount      @relation("TransferTo", fields: [toAccountId], references: [id], onDelete: Cascade)
  transferType TransferType @relation(fields: [transferTypeId], references: [id])

  @@map("transfer_transactions")
}